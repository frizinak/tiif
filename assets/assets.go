// Code generated by go-bindata.
// sources:
// assets/assets/tpls/base/result-page-head.txt
// assets/assets/tpls/base/result-page.txt
// assets/assets/tpls/base/search-result.txt
// assets/assets/tpls/base/search-results.txt
// assets/assets/tpls/providers/archwiki/result-page.txt
// assets/assets/tpls/providers/stackoverflow/result-page.txt
// assets/assets/tpls/providers/wikipedia/result-page.txt
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplsBaseResultPageHeadTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x49\x2c\x2d\xc9\xc8\x2f\x52\xb0\xb2\x55\xd0\x73\x04\x33\x6b\x6b\xb9\xaa\xab\x95\x62\x0c\x8c\x8d\xa3\x0d\xad\x8d\x4d\x72\x95\x6a\x6b\xab\xab\xf5\x42\x32\x4b\x72\x52\x41\x2c\x88\x8c\x01\x48\x18\xa8\x4e\x57\x21\x33\x4d\x01\x6a\x46\x6d\xad\x42\x34\x50\x25\xcc\x94\xd8\xea\xea\xd4\xbc\x14\xa0\x2a\x40\x00\x00\x00\xff\xff\x63\xc6\x02\xc1\x65\x00\x00\x00")

func tplsBaseResultPageHeadTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageHeadTxt,
		"tpls/base/result-page-head.txt",
	)
}

func tplsBaseResultPageHeadTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageHeadTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page-head.txt", size: 101, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\x2f\x4a\x2d\x2e\xcd\x29\xd1\x2d\x48\x4c\x4f\xd5\xcd\x48\x4d\x4c\xd1\x2b\xa9\x28\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\x73\xca\x4f\xa9\x54\xa8\x51\x48\xcb\xcf\x49\x01\x0a\x00\x02\x00\x00\xff\xff\x1f\x22\x89\x2f\x3c\x00\x00\x00")

func tplsBaseResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageTxt,
		"tpls/base/result-page.txt",
	)
}

func tplsBaseResultPageTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page.txt", size: 60, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x8a\x31\x30\x36\x8e\x36\xb4\x36\x36\xc9\x55\xaa\xad\xad\xae\xd6\x0b\xc9\x2c\xc9\x49\x55\xa8\x51\x28\x29\xca\xcc\x55\x00\x89\x40\x54\x18\x80\xa4\xb9\x80\xf2\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\x40\x55\xc9\xf9\x79\xc9\x89\x25\x0a\x4a\x0a\x40\xa0\x04\xd5\x05\x54\x07\x08\x00\x00\xff\xff\x67\x61\x67\xca\x58\x00\x00\x00")

func tplsBaseSearchResultTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultTxt,
		"tpls/base/search-result.txt",
	)
}

func tplsBaseSearchResultTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-result.txt", size: 88, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xcc\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4f\xf1\x18\xea\x42\x70\x46\x74\x29\x78\x16\x19\x6d\xd4\x42\x3b\x94\x24\x03\x42\xcc\xdd\x9b\xb7\x7a\xf0\xc1\x3f\x98\x71\x6d\x1f\xc2\x38\x9f\x30\x3e\x70\xbb\xa3\x20\xbb\x0f\x88\x99\x49\x5f\x43\x70\xc1\x1f\x1b\xcf\x4d\xdf\x48\x87\xeb\x94\xdc\x8f\x81\x4a\xeb\xb6\x54\x25\xa4\x67\x15\x3a\x0b\x55\x7e\x7d\x33\x93\xf4\x45\x8b\xfe\x34\xa1\x44\xc8\x2c\x83\xda\x14\x6f\x0f\x00\x00\xff\xff\x0d\x64\x07\x7e\x6c\x00\x00\x00")

func tplsBaseSearchResultsTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultsTxt,
		"tpls/base/search-results.txt",
	)
}

func tplsBaseSearchResultsTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-results.txt", size: 108, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersArchwikiResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xc1\xaa\xc2\x30\x10\x45\xf7\xef\x2b\x86\xd0\xe5\x4b\xac\xc4\x95\xe2\xc6\x5f\xd0\x9d\x82\x44\x33\xad\x81\x34\x29\xcd\x08\xca\x98\x7f\x37\xa5\x59\xba\xbb\x9c\x99\x7b\x0f\x33\xe1\x30\x7a\x43\x08\xe2\x66\x12\xae\x26\x4c\x4f\x4f\x72\x34\x3d\xca\x07\x1a\xab\xe8\x45\x02\x14\xc8\x9c\xff\x98\xd5\x21\xda\x37\x7c\xa0\x8b\xde\x16\x50\x08\x4c\x26\xf4\x08\xcd\xf5\x1f\x9a\x04\xdb\x3d\xa8\x23\xde\xc9\xc5\x90\x6a\x45\x5c\x5a\xad\xcf\xeb\x9d\xde\x0c\x22\xe7\x32\x71\x72\xe4\x71\x4e\xcb\xa5\x9d\x71\xf9\x73\x1d\x2c\xeb\x3f\x4d\xcc\x18\xaa\xb1\x86\x6f\x00\x00\x00\xff\xff\x2e\x58\x5c\x73\xba\x00\x00\x00")

func tplsProvidersArchwikiResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersArchwikiResultPageTxt,
		"tpls/providers/archwiki/result-page.txt",
	)
}

func tplsProvidersArchwikiResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersArchwikiResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/archwiki/result-page.txt", size: 186, mode: os.FileMode(420), modTime: time.Unix(1456951013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersStackoverflowResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x4f\x4d\x4b\x03\x31\x10\xbd\xfb\x2b\x1e\x4b\x8f\x6e\xac\xae\xa7\x82\x87\xd2\x93\x20\x82\x67\x05\x49\xcd\xb4\x5d\x48\x33\x25\x33\x8b\xca\x9a\xff\x6e\x76\x13\x41\x14\xaf\x9e\x66\x92\xf7\x35\x6f\x1c\x95\x8e\x27\x6f\x95\xd0\x6c\xad\xd0\x45\x24\x19\xbc\xb6\x27\xbb\xa7\xf6\x40\xd6\x19\x7d\xd3\x06\x06\x6d\x4a\x67\xe3\x18\x6d\xd8\x13\x16\xcf\xe7\x58\x08\x56\x37\x30\x0f\x03\x89\xf6\x1c\x66\xb4\xdf\xc1\xdc\xca\x86\x1d\x55\xba\xd9\x70\x50\x0a\x8a\x0f\xec\xd8\xbb\x3c\x5e\xd8\x73\xbc\xeb\x03\x09\x9a\xa7\x65\xd7\x3d\x76\x57\xc7\x66\xe6\x92\x97\x3f\x64\x05\x0e\xae\xa2\x79\xcb\x33\x2f\x2d\xa6\xc0\x75\x90\x57\x8a\x98\xa1\x6a\x79\x3d\x59\x96\x7f\x72\xd8\xbe\x23\x5b\x96\xe7\x7a\xd0\x03\xc7\x94\x56\x5f\xdc\x65\x4d\xff\x55\xac\xf0\xff\xbd\x56\x11\x7c\x2f\x73\x39\x19\xdd\xb3\xc2\xd6\x42\x3f\x4f\x2f\xc2\xcf\x00\x00\x00\xff\xff\x07\x6d\xa0\x5c\xc9\x01\x00\x00")

func tplsProvidersStackoverflowResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersStackoverflowResultPageTxt,
		"tpls/providers/stackoverflow/result-page.txt",
	)
}

func tplsProvidersStackoverflowResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersStackoverflowResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/stackoverflow/result-page.txt", size: 457, mode: os.FileMode(420), modTime: time.Unix(1456951013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersWikipediaResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xc1\xaa\xc2\x30\x10\x45\xf7\xef\x2b\x86\xd0\xe5\x4b\xac\xc4\x95\xe2\xc6\x5f\xd0\x9d\x82\x44\x33\xad\x81\x34\x29\xcd\x08\xca\x98\x7f\x37\xa5\x59\xba\xbb\x9c\x99\x7b\x0f\x33\xe1\x30\x7a\x43\x08\xe2\x66\x12\xae\x26\x4c\x4f\x4f\x72\x34\x3d\xca\x07\x1a\xab\xe8\x45\x02\x14\xc8\x9c\xff\x98\xd5\x21\xda\x37\x7c\xa0\x8b\xde\x16\x50\x08\x4c\x26\xf4\x08\xcd\xf5\x1f\x9a\x04\xdb\x3d\xa8\x23\xde\xc9\xc5\x90\x6a\x45\x5c\x5a\xad\xcf\xeb\x9d\xde\x0c\x22\xe7\x32\x71\x72\xe4\x71\x4e\xcb\xa5\x9d\x71\xf9\x73\x1d\x2c\xeb\x3f\x4d\xcc\x18\xaa\xb1\x86\x6f\x00\x00\x00\xff\xff\x2e\x58\x5c\x73\xba\x00\x00\x00")

func tplsProvidersWikipediaResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersWikipediaResultPageTxt,
		"tpls/providers/wikipedia/result-page.txt",
	)
}

func tplsProvidersWikipediaResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersWikipediaResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/wikipedia/result-page.txt", size: 186, mode: os.FileMode(420), modTime: time.Unix(1456951013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpls/base/result-page-head.txt": tplsBaseResultPageHeadTxt,
	"tpls/base/result-page.txt": tplsBaseResultPageTxt,
	"tpls/base/search-result.txt": tplsBaseSearchResultTxt,
	"tpls/base/search-results.txt": tplsBaseSearchResultsTxt,
	"tpls/providers/archwiki/result-page.txt": tplsProvidersArchwikiResultPageTxt,
	"tpls/providers/stackoverflow/result-page.txt": tplsProvidersStackoverflowResultPageTxt,
	"tpls/providers/wikipedia/result-page.txt": tplsProvidersWikipediaResultPageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpls": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"result-page-head.txt": &bintree{tplsBaseResultPageHeadTxt, map[string]*bintree{}},
			"result-page.txt": &bintree{tplsBaseResultPageTxt, map[string]*bintree{}},
			"search-result.txt": &bintree{tplsBaseSearchResultTxt, map[string]*bintree{}},
			"search-results.txt": &bintree{tplsBaseSearchResultsTxt, map[string]*bintree{}},
		}},
		"providers": &bintree{nil, map[string]*bintree{
			"archwiki": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersArchwikiResultPageTxt, map[string]*bintree{}},
			}},
			"stackoverflow": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersStackoverflowResultPageTxt, map[string]*bintree{}},
			}},
			"wikipedia": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersWikipediaResultPageTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

