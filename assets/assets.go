// Code generated by go-bindata.
// sources:
// assets/assets/tpls/base/result-page-head.txt
// assets/assets/tpls/base/result-page.txt
// assets/assets/tpls/base/search-result.txt
// assets/assets/tpls/base/search-results.txt
// assets/assets/tpls/providers/archwiki/result-page.txt
// assets/assets/tpls/providers/stackoverflow/result-page.txt
// assets/assets/tpls/providers/wikipedia/result-page.txt
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplsBaseResultPageHeadTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x49\x2c\x2d\xc9\xc8\x2f\x52\xb0\xb2\x55\xd0\x73\x04\x33\x6b\x6b\xb9\xaa\xab\x95\x62\x0c\x8c\x8d\xa3\x0d\xad\x8d\x4d\x72\x95\x6a\x6b\xab\xab\xf5\x42\x32\x4b\x72\x52\x41\x2c\x88\x8c\x01\x48\x18\xa8\x4e\x57\x21\x33\x4d\x01\x6a\x46\x6d\xad\x42\x34\x50\x25\xcc\x94\xd8\xea\xea\xd4\xbc\x14\xa0\x2a\x40\x00\x00\x00\xff\xff\x63\xc6\x02\xc1\x65\x00\x00\x00")

func tplsBaseResultPageHeadTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageHeadTxt,
		"tpls/base/result-page-head.txt",
	)
}

func tplsBaseResultPageHeadTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageHeadTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page-head.txt", size: 101, mode: os.FileMode(420), modTime: time.Unix(1456731782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\x2f\x4a\x2d\x2e\xcd\x29\xd1\x2d\x48\x4c\x4f\xd5\xcd\x48\x4d\x4c\xd1\x2b\xa9\x28\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\x73\xca\x4f\xa9\x04\xb2\x00\x01\x00\x00\xff\xff\x61\x05\x7f\x0f\x35\x00\x00\x00")

func tplsBaseResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageTxt,
		"tpls/base/result-page.txt",
	)
}

func tplsBaseResultPageTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page.txt", size: 53, mode: os.FileMode(420), modTime: time.Unix(1456731782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x8a\x31\x30\x36\x8e\x36\xb4\x36\x36\xc9\x55\xaa\xad\xad\xae\xd6\x0b\xc9\x2c\xc9\x49\x55\xa8\x51\x28\x29\xca\xcc\x55\x00\x89\x40\x54\x18\x80\xa4\xb9\x80\xf2\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\x40\x55\xc9\xf9\x79\xc9\x89\x25\x0a\x4a\x0a\x40\xa0\x04\xd5\x05\x54\x07\x08\x00\x00\xff\xff\x67\x61\x67\xca\x58\x00\x00\x00")

func tplsBaseSearchResultTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultTxt,
		"tpls/base/search-result.txt",
	)
}

func tplsBaseSearchResultTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-result.txt", size: 88, mode: os.FileMode(420), modTime: time.Unix(1456731782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xcc\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4f\xf1\x18\xea\x42\x70\x46\x74\x29\x78\x16\x19\x6d\xd4\x42\x3b\x94\x24\x03\x42\xcc\xdd\x9b\xb7\x7a\xf0\xc1\x3f\x98\x71\x6d\x1f\xc2\x38\x9f\x30\x3e\x70\xbb\xa3\x20\xbb\x0f\x88\x99\x49\x5f\x43\x70\xc1\x1f\x1b\xcf\x4d\xdf\x48\x87\xeb\x94\xdc\x8f\x81\x4a\xeb\xb6\x54\x25\xa4\x67\x15\x3a\x0b\x55\x7e\x7d\x33\x93\xf4\x45\x8b\xfe\x34\xa1\x44\xc8\x2c\x83\xda\x14\x6f\x0f\x00\x00\xff\xff\x0d\x64\x07\x7e\x6c\x00\x00\x00")

func tplsBaseSearchResultsTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultsTxt,
		"tpls/base/search-results.txt",
	)
}

func tplsBaseSearchResultsTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-results.txt", size: 108, mode: os.FileMode(420), modTime: time.Unix(1456731782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersArchwikiResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\xc1\x0a\xc2\x30\x0c\x06\xe0\xbb\x4f\x11\xca\x8e\xb6\x4e\xea\x49\xf1\xe2\x2b\xe8\x4d\x41\xa2\x8d\xb3\xd0\x75\x63\x8d\xa0\x84\xbe\xbb\x9d\xdb\xc9\xdb\x47\xf2\x27\xbf\x08\x53\xdb\x07\x64\x02\x75\xc3\x44\xab\x81\xd2\x2b\xb0\xee\xb1\x21\xfd\x24\x74\x86\xdf\xac\xc0\x80\xce\x79\x21\x62\x0e\x9d\xfb\x14\x15\xc2\x80\xb1\x21\xa8\xae\x4b\xa8\x12\x6c\xf7\x60\x8e\x74\x67\xdf\xc5\x34\x67\xd5\xa5\xb6\xf6\xbc\xde\xd9\x4d\xab\x72\x2e\xb7\x27\xcf\x81\x46\x4d\x9b\x7a\x1c\x97\x9c\x7f\xc0\xef\xed\x5f\x85\x08\x45\x37\x55\xcd\xf8\x06\x00\x00\xff\xff\x2e\xa3\x65\x3e\xac\x00\x00\x00")

func tplsProvidersArchwikiResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersArchwikiResultPageTxt,
		"tpls/providers/archwiki/result-page.txt",
	)
}

func tplsProvidersArchwikiResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersArchwikiResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/archwiki/result-page.txt", size: 172, mode: os.FileMode(420), modTime: time.Unix(1456818640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersStackoverflowResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x4a\x03\x31\x10\x86\xef\x3e\xc5\xcf\xd2\xa3\x89\xd5\xf5\x54\xf0\x50\x7a\x12\x44\xf0\xac\x20\xa9\x19\xdb\x85\x34\x29\x99\x59\x54\x62\xde\xdd\xec\x26\x8a\x54\x4f\x99\xcc\x7c\xf9\xbf\x49\x4a\x42\x87\xa3\x33\x42\xe8\xb6\x86\xe9\x22\x12\x8f\x4e\xd4\xd1\xec\x48\xed\xc9\x58\x2d\xef\xd2\x41\x43\xe5\x7c\x96\x52\x34\x7e\x47\x58\x3c\x9f\x63\xc1\x58\xdd\x40\x3f\x8c\xc4\x32\x04\x3f\x4f\x87\x57\xe8\x5b\xde\x04\x4b\x0d\xd7\x9b\xe0\x85\xbc\xe0\x13\x2f\xc1\x85\x78\x37\x78\x62\x74\x4f\xcb\xbe\x7f\xec\xaf\x0e\xdd\x0c\x91\xe3\x53\xbe\xf6\xbd\x6d\xed\x52\x95\xb3\x14\x0a\x93\x62\xed\xf9\x8d\x22\xe6\x51\xcb\xba\x9e\xb2\x6a\x9f\x2c\xb6\x1f\x28\x59\xf5\xba\x1e\x65\x1f\x62\xce\xab\x6f\x76\xd9\xb4\x7f\xbe\x52\xf9\x7f\xf7\xf8\xd9\xf3\xb7\xf3\x72\x0a\xba\x0f\x02\xd3\xbc\xa7\x86\xfa\xf0\x2b\x00\x00\xff\xff\xff\x17\x40\x0d\x62\x01\x00\x00")

func tplsProvidersStackoverflowResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersStackoverflowResultPageTxt,
		"tpls/providers/stackoverflow/result-page.txt",
	)
}

func tplsProvidersStackoverflowResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersStackoverflowResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/stackoverflow/result-page.txt", size: 354, mode: os.FileMode(420), modTime: time.Unix(1456847907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersWikipediaResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\xc1\x0a\xc2\x30\x0c\x06\xe0\xbb\x4f\x11\xca\x8e\xb6\x4e\xea\x49\xf1\xe2\x2b\xe8\x4d\x41\xa2\x8d\xb3\xd0\x75\x63\x8d\xa0\x84\xbe\xbb\x9d\xdb\xc9\xdb\x47\xf2\x27\xbf\x08\x53\xdb\x07\x64\x02\x75\xc3\x44\xab\x81\xd2\x2b\xb0\xee\xb1\x21\xfd\x24\x74\x86\xdf\xac\xc0\x80\xce\x79\x21\x62\x0e\x9d\xfb\x14\x15\xc2\x80\xb1\x21\xa8\xae\x4b\xa8\x12\x6c\xf7\x60\x8e\x74\x67\xdf\xc5\x34\x67\xd5\xa5\xb6\xf6\xbc\xde\xd9\x4d\xab\x72\x2e\xb7\x27\xcf\x81\x46\x4d\x9b\x7a\x1c\x97\x9c\x7f\xc0\xef\xed\x5f\x85\x08\x45\x37\x55\xcd\xf8\x06\x00\x00\xff\xff\x2e\xa3\x65\x3e\xac\x00\x00\x00")

func tplsProvidersWikipediaResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersWikipediaResultPageTxt,
		"tpls/providers/wikipedia/result-page.txt",
	)
}

func tplsProvidersWikipediaResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersWikipediaResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/wikipedia/result-page.txt", size: 172, mode: os.FileMode(420), modTime: time.Unix(1456731782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpls/base/result-page-head.txt": tplsBaseResultPageHeadTxt,
	"tpls/base/result-page.txt": tplsBaseResultPageTxt,
	"tpls/base/search-result.txt": tplsBaseSearchResultTxt,
	"tpls/base/search-results.txt": tplsBaseSearchResultsTxt,
	"tpls/providers/archwiki/result-page.txt": tplsProvidersArchwikiResultPageTxt,
	"tpls/providers/stackoverflow/result-page.txt": tplsProvidersStackoverflowResultPageTxt,
	"tpls/providers/wikipedia/result-page.txt": tplsProvidersWikipediaResultPageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpls": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"result-page-head.txt": &bintree{tplsBaseResultPageHeadTxt, map[string]*bintree{}},
			"result-page.txt": &bintree{tplsBaseResultPageTxt, map[string]*bintree{}},
			"search-result.txt": &bintree{tplsBaseSearchResultTxt, map[string]*bintree{}},
			"search-results.txt": &bintree{tplsBaseSearchResultsTxt, map[string]*bintree{}},
		}},
		"providers": &bintree{nil, map[string]*bintree{
			"archwiki": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersArchwikiResultPageTxt, map[string]*bintree{}},
			}},
			"stackoverflow": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersStackoverflowResultPageTxt, map[string]*bintree{}},
			}},
			"wikipedia": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersWikipediaResultPageTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

