// Code generated by go-bindata.
// sources:
// assets/assets/tpls/base/result-page-head.txt
// assets/assets/tpls/base/result-page.txt
// assets/assets/tpls/base/search-result.txt
// assets/assets/tpls/base/search-results.txt
// assets/assets/tpls/providers/archwiki/result-page.txt
// assets/assets/tpls/providers/stackoverflow/result-page.txt
// assets/assets/tpls/providers/wikipedia/result-page.txt
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplsBaseResultPageHeadTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x49\x2c\x2d\xc9\xc8\x2f\x52\xb0\xb2\x55\xd0\x73\x04\x33\x6b\x6b\xb9\xaa\xab\xf5\x42\x32\x4b\x72\x52\x15\x6a\x14\xd2\xf2\x73\x52\x14\x6a\x14\x92\xf3\x73\xf2\x8b\x7c\x32\xf3\x52\x8b\x15\x94\x62\x0c\x8c\x8d\xa3\x0d\xad\x8d\x4d\x72\x95\xc0\x6a\x33\xd3\x14\xa0\xa6\xd4\xd6\x56\x57\x43\x4d\xc1\xaf\xd5\x18\xa4\xb5\xba\x3a\x35\x2f\xa5\xb6\x96\x0b\x10\x00\x00\xff\xff\xc1\x0a\x53\x42\x85\x00\x00\x00")

func tplsBaseResultPageHeadTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageHeadTxt,
		"tpls/base/result-page-head.txt",
	)
}

func tplsBaseResultPageHeadTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageHeadTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page-head.txt", size: 133, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\x2f\x4a\x2d\x2e\xcd\x29\xd1\x2d\x48\x4c\x4f\xd5\xcd\x48\x4d\x4c\xd1\x2b\xa9\x28\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\x73\xca\x4f\xa9\x54\xa8\x51\x48\xcb\xcf\x49\xa9\xad\xe5\x02\x04\x00\x00\xff\xff\x1f\x22\x89\x2f\x3c\x00\x00\x00")

func tplsBaseResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageTxt,
		"tpls/base/result-page.txt",
	)
}

func tplsBaseResultPageTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page.txt", size: 60, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x8a\x31\x30\x36\x8e\x36\xb4\x36\x36\xc9\x55\xaa\xad\xad\xae\xd6\x0b\xc9\x2c\xc9\x49\x55\xa8\x51\x28\x29\xca\xcc\x55\x00\x89\x40\x54\x18\x80\xa4\xb9\xaa\xab\xf5\x5c\x52\x8b\x93\x8b\x32\x0b\x4a\x32\xf3\xf3\x14\x6a\x14\x92\xf3\xf3\x92\x13\x4b\x14\x94\x14\x14\x14\x14\x94\xa0\xba\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x67\x61\x67\xca\x58\x00\x00\x00")

func tplsBaseSearchResultTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultTxt,
		"tpls/base/search-result.txt",
	)
}

func tplsBaseSearchResultTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-result.txt", size: 88, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x04\xc0\x41\xaa\xc2\x30\x10\x80\xe1\x7d\x4e\xf1\x13\xfa\x16\x0f\x4c\x44\x97\x82\x67\x91\x68\x47\x0d\xb4\xa1\x24\x53\x10\xc6\xb9\xbb\x5f\x30\xeb\xa5\xbd\x84\xa9\x1e\x98\x6e\x5c\xae\x64\x92\x7b\x00\x30\x1b\xfb\xca\x54\x39\xf1\x65\xeb\xb5\xe9\x93\xf8\x77\x9e\xa3\xfb\x3f\x66\x2a\xeb\xb6\x14\x15\xe2\xbd\x0c\x39\x0e\x29\xfd\xf1\x4e\x5d\xc6\xbe\x68\xd6\x8f\x46\xb2\x7b\x30\x4b\x48\x9b\xdd\xc3\x2f\x00\x00\xff\xff\x0d\x64\x07\x7e\x6c\x00\x00\x00")

func tplsBaseSearchResultsTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultsTxt,
		"tpls/base/search-results.txt",
	)
}

func tplsBaseSearchResultsTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-results.txt", size: 108, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersArchwikiResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xbd\xaa\xc2\x40\x14\x84\xfb\x7d\x8a\xc3\x92\xf2\xee\xde\x48\xac\x14\x1b\x5f\x41\x3b\x05\x59\xcd\x49\x0c\x6c\x7e\xc8\x1e\x41\x19\xcf\xbb\x4b\x4c\x4a\xbb\x8f\x19\x66\x3e\x40\xb8\x1d\x62\x10\x26\x7b\x0d\x89\xff\x47\x4e\x8f\x28\x6e\x08\x35\xbb\x3b\x87\xd2\xcb\x53\x2c\x79\x55\x03\xf8\x7d\x5f\xbe\xe8\x4d\x55\x1f\x4b\x55\x63\x00\x1a\x43\x57\x33\x65\x97\x3f\xca\x12\x6d\x76\xe4\x0f\x7c\x93\xa6\xef\x12\xb9\xef\xc4\x9e\xf3\xa2\x38\xad\xb6\xc5\xba\xb5\xaa\x80\x3f\x36\x12\x79\xa2\xb9\xc9\xa7\xd8\x00\x4d\x45\xf3\xbb\xfb\x65\x02\xb8\x5b\x8c\x0b\x7c\x02\x00\x00\xff\xff\xe9\xde\x7c\xc6\xb8\x00\x00\x00")

func tplsProvidersArchwikiResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersArchwikiResultPageTxt,
		"tpls/providers/archwiki/result-page.txt",
	)
}

func tplsProvidersArchwikiResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersArchwikiResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/archwiki/result-page.txt", size: 184, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersStackoverflowResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x8f\x41\x4b\x03\x31\x10\x46\xef\xfd\x15\x1f\xa1\x47\x37\xb6\x8d\xa7\x8a\x87\xd2\x93\x20\x82\x67\x05\x49\xcd\xb4\x5d\xc8\x26\x4b\x32\x8b\x4a\x36\xff\x5d\xb2\x59\x41\x44\xcf\xbd\xce\x7b\x33\xc9\x4b\x89\xa9\xeb\xad\x66\x82\x38\xe8\x48\xd7\x81\xe2\x60\xb9\xe9\xf5\x89\x9a\x33\x69\x23\xf9\x83\x05\x64\xce\x8b\x94\x82\x76\x27\xc2\xf2\xf5\x0a\xcb\x88\xed\x1d\xe4\xd3\x40\x91\x5b\xef\x26\xda\x1e\x21\xef\xe3\xde\x1b\x42\x33\x0d\xe4\xde\x3b\x26\xc7\x18\x71\xf4\xd6\x60\xc4\x9b\xb7\x3e\x3c\xb4\x8e\x22\xc4\xcb\x4a\xa9\x67\xb5\xe9\x04\x46\xb4\xce\x14\x6f\x33\xad\x91\x8d\xff\x5c\xa8\xd8\x99\x99\x92\x2b\x93\x45\x4a\x0d\xca\xdb\x3b\x17\xdf\x29\x60\x42\xf5\xfa\xfa\x56\xdd\x74\x22\xe7\x4a\xc8\xe0\xf0\x89\x94\x66\x71\x37\xf0\xd9\x87\x9c\xb7\xdf\xf6\xaa\xa8\x7f\x55\x56\xff\x92\x8d\x75\xe1\x47\x99\x5a\x97\xcf\x3e\x7a\x86\x9e\xdb\x7e\x57\xd4\xc5\xaf\x00\x00\x00\xff\xff\x58\x72\x92\x5a\xdf\x01\x00\x00")

func tplsProvidersStackoverflowResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersStackoverflowResultPageTxt,
		"tpls/providers/stackoverflow/result-page.txt",
	)
}

func tplsProvidersStackoverflowResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersStackoverflowResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/stackoverflow/result-page.txt", size: 479, mode: os.FileMode(420), modTime: time.Unix(1477080251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersWikipediaResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\xbd\xaa\xc2\x40\x14\x84\xfb\x7d\x8a\xc3\x92\xf2\xee\xde\x48\xac\x14\x1b\x5f\x41\x3b\x05\x59\xcd\x49\x0c\x6c\x7e\xc8\x1e\x41\x19\xcf\xbb\x4b\x4c\x4a\xbb\x8f\x19\x66\x3e\x40\xb8\x1d\x62\x10\x26\x7b\x0d\x89\xff\x47\x4e\x8f\x28\x6e\x08\x35\xbb\x3b\x87\xd2\xcb\x53\x2c\x79\x55\x03\xf8\x7d\x5f\xbe\xe8\x4d\x55\x1f\x4b\x55\x63\x00\x1a\x43\x57\x33\x65\x97\x3f\xca\x12\x6d\x76\xe4\x0f\x7c\x93\xa6\xef\x12\xb9\xef\xc4\x9e\xf3\xa2\x38\xad\xb6\xc5\xba\xb5\xaa\x80\x3f\x36\x12\x79\xa2\xb9\xc9\xa7\xd8\x00\x4d\x45\xf3\xbb\xfb\x65\x02\xb8\x5b\x8c\x0b\x7c\x02\x00\x00\xff\xff\xe9\xde\x7c\xc6\xb8\x00\x00\x00")

func tplsProvidersWikipediaResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersWikipediaResultPageTxt,
		"tpls/providers/wikipedia/result-page.txt",
	)
}

func tplsProvidersWikipediaResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersWikipediaResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/wikipedia/result-page.txt", size: 184, mode: os.FileMode(420), modTime: time.Unix(1477080750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpls/base/result-page-head.txt": tplsBaseResultPageHeadTxt,
	"tpls/base/result-page.txt": tplsBaseResultPageTxt,
	"tpls/base/search-result.txt": tplsBaseSearchResultTxt,
	"tpls/base/search-results.txt": tplsBaseSearchResultsTxt,
	"tpls/providers/archwiki/result-page.txt": tplsProvidersArchwikiResultPageTxt,
	"tpls/providers/stackoverflow/result-page.txt": tplsProvidersStackoverflowResultPageTxt,
	"tpls/providers/wikipedia/result-page.txt": tplsProvidersWikipediaResultPageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpls": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"result-page-head.txt": &bintree{tplsBaseResultPageHeadTxt, map[string]*bintree{}},
			"result-page.txt": &bintree{tplsBaseResultPageTxt, map[string]*bintree{}},
			"search-result.txt": &bintree{tplsBaseSearchResultTxt, map[string]*bintree{}},
			"search-results.txt": &bintree{tplsBaseSearchResultsTxt, map[string]*bintree{}},
		}},
		"providers": &bintree{nil, map[string]*bintree{
			"archwiki": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersArchwikiResultPageTxt, map[string]*bintree{}},
			}},
			"stackoverflow": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersStackoverflowResultPageTxt, map[string]*bintree{}},
			}},
			"wikipedia": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersWikipediaResultPageTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

