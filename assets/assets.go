// Code generated by go-bindata.
// sources:
// assets/assets/tpls/base/result-page-head.txt
// assets/assets/tpls/base/result-page.txt
// assets/assets/tpls/base/search-result.txt
// assets/assets/tpls/base/search-results.txt
// assets/assets/tpls/providers/archwiki/result-page.txt
// assets/assets/tpls/providers/stackoverflow/result-page.txt
// assets/assets/tpls/providers/wikipedia/result-page.txt
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplsBaseResultPageHeadTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x49\x2c\x2d\xc9\xc8\x2f\x52\xb0\xb2\x55\xd0\x73\x04\x33\x6b\x6b\xb9\xaa\xab\xf5\x42\x32\x4b\x72\x52\x15\x6a\x14\xd2\xf2\x73\x52\x80\x54\x72\x7e\x4e\x7e\x91\x4f\x66\x5e\x6a\xb1\x82\x52\x8c\x81\xb1\x71\xb4\xa1\xb5\xb1\x49\xae\x12\x58\x6d\x66\x9a\x02\xd4\x94\xda\x5a\xa0\x4e\x88\x29\xf8\xb5\x1a\x83\xb4\x56\x57\xa7\xe6\xa5\x00\x4d\x00\x04\x00\x00\xff\xff\xc1\x0a\x53\x42\x85\x00\x00\x00")

func tplsBaseResultPageHeadTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageHeadTxt,
		"tpls/base/result-page-head.txt",
	)
}

func tplsBaseResultPageHeadTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageHeadTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page-head.txt", size: 133, mode: os.FileMode(420), modTime: time.Unix(1457173135, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\x2f\x4a\x2d\x2e\xcd\x29\xd1\x2d\x48\x4c\x4f\xd5\xcd\x48\x4d\x4c\xd1\x2b\xa9\x28\x51\x52\xd0\xab\xad\xe5\xaa\xae\xd6\x73\xca\x4f\xa9\x54\xa8\x51\x48\xcb\xcf\x49\x01\x0a\x00\x02\x00\x00\xff\xff\x1f\x22\x89\x2f\x3c\x00\x00\x00")

func tplsBaseResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseResultPageTxt,
		"tpls/base/result-page.txt",
	)
}

func tplsBaseResultPageTxt() (*asset, error) {
	bytes, err := tplsBaseResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/result-page.txt", size: 60, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x8a\x31\x30\x36\x8e\x36\xb4\x36\x36\xc9\x55\xaa\xad\xad\xae\xd6\x0b\xc9\x2c\xc9\x49\x55\xa8\x51\x28\x29\xca\xcc\x55\x00\x89\x40\x54\x18\x80\xa4\xb9\x80\xf2\x2e\xa9\xc5\xc9\x45\x99\x05\x25\x99\xf9\x79\x40\x55\xc9\xf9\x79\xc9\x89\x25\x0a\x4a\x0a\x40\xa0\x04\xd5\x05\x54\x07\x08\x00\x00\xff\xff\x67\x61\x67\xca\x58\x00\x00\x00")

func tplsBaseSearchResultTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultTxt,
		"tpls/base/search-result.txt",
	)
}

func tplsBaseSearchResultTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-result.txt", size: 88, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsBaseSearchResultsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xcc\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4f\xf1\x18\xea\x42\x70\x46\x74\x29\x78\x16\x19\x6d\xd4\x42\x3b\x94\x24\x03\x42\xcc\xdd\x9b\xb7\x7a\xf0\xc1\x3f\x98\x71\x6d\x1f\xc2\x38\x9f\x30\x3e\x70\xbb\xa3\x20\xbb\x0f\x88\x99\x49\x5f\x43\x70\xc1\x1f\x1b\xcf\x4d\xdf\x48\x87\xeb\x94\xdc\x8f\x81\x4a\xeb\xb6\x54\x25\xa4\x67\x15\x3a\x0b\x55\x7e\x7d\x33\x93\xf4\x45\x8b\xfe\x34\xa1\x44\xc8\x2c\x83\xda\x14\x6f\x0f\x00\x00\xff\xff\x0d\x64\x07\x7e\x6c\x00\x00\x00")

func tplsBaseSearchResultsTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsBaseSearchResultsTxt,
		"tpls/base/search-results.txt",
	)
}

func tplsBaseSearchResultsTxt() (*asset, error) {
	bytes, err := tplsBaseSearchResultsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/base/search-results.txt", size: 108, mode: os.FileMode(420), modTime: time.Unix(1456951061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersArchwikiResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x9e\x62\x08\x5d\x9a\x58\x89\x2b\xc5\x8d\x57\xd0\x9d\x82\x44\x33\xad\x81\x34\x29\xcd\x08\xca\x98\xbb\x9b\xda\x2e\xdd\x7d\xde\xcc\xff\x8f\x99\xb0\xeb\xbd\x21\x04\x71\x33\x09\x57\x03\xa6\xa7\x27\xd9\x9b\x16\xe5\x03\x8d\x55\xf4\x22\x01\x2a\xe7\x05\xb3\x3a\x44\xfb\x86\x0f\x34\xd1\xdb\x02\x0a\x81\xc1\x84\x16\xa1\xba\x2e\xa1\x4a\xb0\xdd\x83\x3a\xe2\x9d\x5c\x0c\x09\xe4\xaf\x22\x2e\xb5\xd6\xe7\xf5\x4e\x6f\x3a\x91\x73\x99\x38\x39\xf2\x38\xa6\xe9\x52\x8f\xb8\xfc\xb9\x06\xa6\x75\xf9\xcf\xc4\x8c\x61\x36\xce\xe1\x1b\x00\x00\xff\xff\xe9\xde\x7c\xc6\xb8\x00\x00\x00")

func tplsProvidersArchwikiResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersArchwikiResultPageTxt,
		"tpls/providers/archwiki/result-page.txt",
	)
}

func tplsProvidersArchwikiResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersArchwikiResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/archwiki/result-page.txt", size: 184, mode: os.FileMode(420), modTime: time.Unix(1457173151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersStackoverflowResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x8f\xcf\x4a\x03\x31\x10\xc6\xef\x3e\xc5\x47\xe8\xd1\x8d\x6d\xe3\xa9\xe2\xa1\xf4\x24\x88\xe0\x59\x41\x52\x33\x6d\x17\xb2\x49\xc9\xcc\xa2\xb2\xe6\xdd\xcd\x6e\x2a\x88\xe8\xb9\xa7\x99\x9d\xef\xcf\xe6\x37\x0c\x42\xdd\xd1\x5b\x21\xa8\xad\x65\xba\x4a\xc4\xbd\x97\xe6\x68\xf7\xd4\x1c\xc8\x3a\x2d\xef\xa2\xa0\x73\xbe\x18\x86\x64\xc3\x9e\x30\x7b\xb9\xc4\x8c\xb1\xba\x85\x7e\xec\x89\xa5\x8d\x61\x52\xdb\x1d\xf4\x1d\x6f\xa2\x23\x34\xd3\x41\x6f\x62\x10\x0a\x82\x4f\xec\xa2\x77\x65\xbc\x46\x1f\xd3\x7d\x1b\x88\xa1\x9e\xe7\xc6\x3c\x99\x65\xa7\xca\xbd\x0d\x6e\xf4\x2d\xa7\x18\x79\xfe\xa7\xa1\xca\xc1\x9d\xd4\xb2\x95\x59\x96\x06\xe3\xbf\xd7\x81\xdf\x28\x61\x92\x6a\xfb\xe2\xc6\x5c\x77\x2a\xe7\xaa\x90\xc3\xf6\x03\xa5\xb4\x7e\xae\x7b\x39\xc4\x94\xf3\xea\xdb\x3d\x1f\xad\x7f\x51\x56\xff\x39\x19\x6b\xe0\x07\x99\x59\x8c\x8f\x7d\x88\x02\x7b\x62\xfb\x4d\x51\x83\x5f\x01\x00\x00\xff\xff\x58\x72\x92\x5a\xdf\x01\x00\x00")

func tplsProvidersStackoverflowResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersStackoverflowResultPageTxt,
		"tpls/providers/stackoverflow/result-page.txt",
	)
}

func tplsProvidersStackoverflowResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersStackoverflowResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/stackoverflow/result-page.txt", size: 479, mode: os.FileMode(420), modTime: time.Unix(1457173234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplsProvidersWikipediaResultPageTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x9e\x62\x08\x5d\x9a\x58\x89\x2b\xc5\x8d\x57\xd0\x9d\x82\x44\x33\xad\x81\x34\x29\xcd\x08\xca\x98\xbb\x9b\xda\x2e\xdd\x7d\xde\xcc\xff\x8f\x99\xb0\xeb\xbd\x21\x04\x71\x33\x09\x57\x03\xa6\xa7\x27\xd9\x9b\x16\xe5\x03\x8d\x55\xf4\x22\x01\x2a\xe7\x05\xb3\x3a\x44\xfb\x86\x0f\x34\xd1\xdb\x02\x0a\x81\xc1\x84\x16\xa1\xba\x2e\xa1\x4a\xb0\xdd\x83\x3a\xe2\x9d\x5c\x0c\x09\xe4\xaf\x22\x2e\xb5\xd6\xe7\xf5\x4e\x6f\x3a\x91\x73\x99\x38\x39\xf2\x38\xa6\xe9\x52\x8f\xb8\xfc\xb9\x06\xa6\x75\xf9\xcf\xc4\x8c\x61\x36\xce\xe1\x1b\x00\x00\xff\xff\xe9\xde\x7c\xc6\xb8\x00\x00\x00")

func tplsProvidersWikipediaResultPageTxtBytes() ([]byte, error) {
	return bindataRead(
		_tplsProvidersWikipediaResultPageTxt,
		"tpls/providers/wikipedia/result-page.txt",
	)
}

func tplsProvidersWikipediaResultPageTxt() (*asset, error) {
	bytes, err := tplsProvidersWikipediaResultPageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpls/providers/wikipedia/result-page.txt", size: 184, mode: os.FileMode(420), modTime: time.Unix(1457173165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpls/base/result-page-head.txt": tplsBaseResultPageHeadTxt,
	"tpls/base/result-page.txt": tplsBaseResultPageTxt,
	"tpls/base/search-result.txt": tplsBaseSearchResultTxt,
	"tpls/base/search-results.txt": tplsBaseSearchResultsTxt,
	"tpls/providers/archwiki/result-page.txt": tplsProvidersArchwikiResultPageTxt,
	"tpls/providers/stackoverflow/result-page.txt": tplsProvidersStackoverflowResultPageTxt,
	"tpls/providers/wikipedia/result-page.txt": tplsProvidersWikipediaResultPageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpls": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"result-page-head.txt": &bintree{tplsBaseResultPageHeadTxt, map[string]*bintree{}},
			"result-page.txt": &bintree{tplsBaseResultPageTxt, map[string]*bintree{}},
			"search-result.txt": &bintree{tplsBaseSearchResultTxt, map[string]*bintree{}},
			"search-results.txt": &bintree{tplsBaseSearchResultsTxt, map[string]*bintree{}},
		}},
		"providers": &bintree{nil, map[string]*bintree{
			"archwiki": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersArchwikiResultPageTxt, map[string]*bintree{}},
			}},
			"stackoverflow": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersStackoverflowResultPageTxt, map[string]*bintree{}},
			}},
			"wikipedia": &bintree{nil, map[string]*bintree{
				"result-page.txt": &bintree{tplsProvidersWikipediaResultPageTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

